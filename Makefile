SHELL:=/usr/bin/env bash

PROJECT ?= $(shell git rev-parse --show-toplevel)
PROJECT_VERSION ?= $(shell grep ^current_version .bumpversion.cfg | awk '{print $$NF'} | tr '-' '.')

.PHONY: chlog black mypy lint sunit unit package test build vars
vars:
	echo "PROJECT_VERSION: $(PROJECT_VERSION)"

black:
	poetry run isort app tests
	poetry run black app tests

mypy: black
	poetry run mypy app tests/*.py

lint: mypy
	poetry run flake8 app tests
	#poetry run doc8 -q docs

sunit:
	poetry run pytest -s tests

unit:
	poetry run pytest tests

package:
	poetry check
	poetry run pip check
	poetry run safety check --full-report

test: lint package unit

chlog:
	github_changelog_generator -u qs5779 -p fastapi-web-starter
	sed -i -e '/^$$/N;/^\n$$/D' ./CHANGELOG.md
	m2r2 --overwrite --anonymous-references CHANGELOG.md
	sed -i '/This Changelog was automatically generated by/d' ./CHANGELOG.rst
	mv -f ./CHANGELOG.rst ./docs/pages/changelog.rst
	poetry run doc8 -q docs

.PHONY: clean clean-build clean-pyc clean-test
clean: clean-build clean-pyc clean-test ## remove all build, test, coverage and Python artifacts

clean-build: ## remove build artifacts
	rm -fr build/
	rm -fr docs/_build
	rm -fr dist/
	rm -fr .eggs/
	find . -name '*.egg-info' -exec rm -fr {} +
	find . -name '*.egg' -exec rm -f {} +

clean-pyc: ## remove Python file artifacts
	find . -name '*.pyc' -exec rm -f {} +
	find . -name '*.pyo' -exec rm -f {} +
	find . -name '*~' -exec rm -f {} +
	find . -name '__pycache__' -exec rm -fr {} +

clean-test: ## remove test and coverage artifacts
	rm -fr .tox/
	rm -f .coverage
	rm -fr htmlcov/
	rm -fr .pytest_cache
	rm -fr .mypy_cache

.DEFAULT:
	@cd docs && $(MAKE) $@
